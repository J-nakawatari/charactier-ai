name: E2E Tests

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mailhog:
        image: mailhog/mailhog:latest
        ports:
          - 1025:1025
          - 8025:8025
        options: >-
          --health-cmd "nc -z localhost 1025"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      minio:
        image: quay.io/minio/minio:latest
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        command: server /data --console-address ":9001"
      
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        npx playwright install --with-deps
    
    - name: Setup Stripe CLI
      run: |
        curl -s https://packages.stripe.dev/api/security/keypair/stripe-cli-gpg/public | gpg --dearmor | sudo tee /usr/share/keyrings/stripe.gpg
        echo "deb [signed-by=/usr/share/keyrings/stripe.gpg] https://packages.stripe.dev/stripe-cli-debian-local stable main" | sudo tee -a /etc/apt/sources.list.d/stripe.list
        sudo apt update
        sudo apt install stripe
    
    - name: Start Stripe webhook forwarding
      run: |
        stripe listen --forward-to localhost:5000/webhook/stripe \
          --api-key ${{ secrets.STRIPE_SECRET_KEY }} \
          --print-json > stripe-webhook.log 2>&1 &
        sleep 5
      env:
        STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
    
    - name: Setup test environment
      run: |
        cp .env.example .env.test
        echo "MONGODB_URI=mongodb://root:password@localhost:27017/charactier-test?authSource=admin" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "SMTP_HOST=localhost" >> .env.test
        echo "SMTP_PORT=1025" >> .env.test
        echo "S3_ENDPOINT=http://localhost:9000" >> .env.test
        echo "S3_ACCESS_KEY=minioadmin" >> .env.test
        echo "S3_SECRET_KEY=minioadmin" >> .env.test
    
    - name: Build application
      run: |
        npm run build --prefix frontend
        npm run build --prefix backend
    
    - name: Generate test specs
      run: npm run gen:specs
    
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
        BASE_URL: http://localhost:3000
    
    - name: Generate coverage report
      if: always()
      run: npm run coverage:report
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: |
          playwright-report/
          coverage/
          test-results/
    
    - name: Upload videos
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-videos
        path: test-results/**/*.webm
    
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coveragePath = './coverage/summary.json';
          
          if (fs.existsSync(coveragePath)) {
            const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf-8'));
            const comment = `## ðŸ“Š E2E Test Coverage Report
            
            - **Total Coverage**: ${coverage.percentage}% (${coverage.ready}/${coverage.total})
            
            ### By Section:
            ${Object.entries(coverage.bySection).map(([section, stats]) => 
              `- **${section}**: ${stats.percentage}% (${stats.ready}/${stats.total})`
            ).join('\n')}
            
            View full report in the [Actions artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }