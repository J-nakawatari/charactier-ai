name: Quick E2E Test

on:
  workflow_dispatch:
    inputs:
      test-pattern:
        description: 'テストファイルパターン'
        required: false
        default: '.*'
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      LANG: ja_JP.UTF-8
      LC_ALL: ja_JP.UTF-8
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup locale
        run: |
          sudo apt-get update
          sudo apt-get install -y locales
          sudo locale-gen ja_JP.UTF-8
          echo "LANG=ja_JP.UTF-8" >> $GITHUB_ENV
          echo "LC_ALL=ja_JP.UTF-8" >> $GITHUB_ENV
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: |
          pnpm install --no-frozen-lockfile
          cd frontend && pnpm install --no-frozen-lockfile
          cd ../backend && pnpm install --no-frozen-lockfile
        
      - name: Install Playwright browsers
        run: |
          # Chromiumのみインストール（依存関係も含む）
          cd frontend && npx playwright install --with-deps chromium
          cd ..
      
      - name: Install wait-on
        run: npm install -g wait-on
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build
      
      - name: Start servers
        run: |
          # 環境変数を設定
          export NODE_ENV=test
          export JWT_SECRET=test-secret-key
          export MONGO_URI=mongodb://localhost:27017/test
          export SENDGRID_API_KEY=dummy-key-for-test
          export STRIPE_SECRET_KEY=sk_test_dummy
          export STRIPE_WEBHOOK_SECRET=whsec_test_dummy
          export DISABLE_RATE_LIMIT=true
          export FRONTEND_URL=http://localhost:3000
          
          # MongoDBが起動しているか確認
          echo "=== Checking MongoDB ==="
          nc -zv localhost 27017 || echo "MongoDB not available"
          
          # テストデータをシード
          echo "=== Seeding test data ==="
          cd backend && node src/scripts/seed-test-data.js
          cd ..
          
          # バックエンドサーバーを起動
          cd backend && NODE_ENV=test DISABLE_RATE_LIMIT=true MONGO_URI=mongodb://localhost:27017/test JWT_SECRET=test-secret-key JWT_REFRESH_SECRET=test-refresh-secret FRONTEND_URL=http://localhost:3000 SMTP_HOST=localhost SMTP_PORT=1025 npm run dev > backend.log 2>&1 &
          BACKEND_PID=$!
          
          # バックエンドの起動を待つ
          echo "=== Waiting for backend to start ==="
          npx wait-on http://localhost:5000/api/v1/health -t 60000
          echo "Backend is ready!"
          
          # APIエンドポイントの動作確認
          echo "=== Testing API endpoints ==="
          
          # データベースのユーザーを確認
          cd backend && node -e "const {MongoClient} = require('mongodb'); (async()=>{const client = new MongoClient('mongodb://localhost:27017/test'); await client.connect(); const users = await client.db().collection('users').find({}).toArray(); console.log('Users in DB:', users); await client.close();})()"
          cd ..
          
          # ログインAPIをテスト
          curl -X POST http://localhost:5000/api/v1/auth/login \
            -H "Content-Type: application/json" \
            -d '{"email":"global-test@example.com","password":"Test123!"}' \
            -v || echo "Login endpoint test failed"
          
          # バックエンドのログを確認
          echo "=== Backend logs (last 50 lines) ==="
          cat backend/backend.log | tail -50 || echo "No backend log found"
          
          # フロントエンドサーバーを起動
          cd ${{ github.workspace }}/frontend && npm run start > frontend.log 2>&1 &
          FRONTEND_PID=$!
          
          # フロントエンドの起動を待つ
          echo "=== Waiting for frontend to start ==="
          npx wait-on http://localhost:3000 -t 60000
          echo "Frontend is ready!"
          
          # 最終確認
          echo "=== Final server status check ==="
          curl -f http://localhost:5000/api/v1/health || (echo "Backend failed"; cat backend/backend.log | tail -100; exit 1)
          curl -f http://localhost:3000 || (echo "Frontend failed"; cat frontend/frontend.log | tail -100; exit 1)
        
      - name: Run specific test
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          NODE_ENV: test
          DISABLE_RATE_LIMIT: true
          TEST_USER_EMAIL: global-test@example.com
          TEST_USER_PASSWORD: Test123!
          TEST_ADMIN_EMAIL: admin@example.com
          TEST_ADMIN_PASSWORD: admin123
        run: |
          npm run test:e2e -- --grep "${{ github.event.inputs.test-pattern }}"
        
      - name: Generate failure report
        if: always()
        run: npm run failures:md || echo "No test results found"
        
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            playwright-report
            test-results/
            coverage/failures.md