import mongoose, { Schema, Document } from 'mongoose';

export interface IAPIError extends Document {
  endpoint: string;  // „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åü„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
  method: string;    // HTTP„É°„ÇΩ„ÉÉ„Éâ (GET, POST, etc.)
  statusCode: number; // HTTP„Çπ„ÉÜ„Éº„Çø„Çπ„Ç≥„Éº„Éâ
  errorType: string;  // „Ç®„É©„Éº„Çø„Ç§„Éó (validation, authentication, server, etc.)
  errorMessage: string; // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
  userId?: string;   // „É¶„Éº„Ç∂„ÉºID (Ë™çË®º„Ç®„É©„Éº„ÅÆÂ†¥Âêà)
  userAgent?: string; // „É¶„Éº„Ç∂„Éº„Ç®„Éº„Ç∏„Çß„É≥„Éà
  ipAddress?: string; // IP„Ç¢„Éâ„É¨„Çπ
  requestBody?: any;  // „É™„ÇØ„Ç®„Çπ„Éà„Éú„Éá„Ç£ (Ê©üÂØÜÊÉÖÂ†±„ÅØÈô§Â§ñ)
  stackTrace?: string; // „Çπ„Çø„ÉÉ„ÇØ„Éà„É¨„Éº„Çπ (ÈñãÁô∫Áí∞Â¢É„ÅÆ„Åø)
  responseTime: number; // „É¨„Çπ„Éù„É≥„ÇπÊôÇÈñì (ms)
  timestamp: Date;   // „Ç®„É©„ÉºÁô∫ÁîüÊôÇÂàª
  resolved: boolean; // Ëß£Ê±∫Ê∏à„Åø„Éï„É©„Ç∞
  resolvedAt?: Date; // Ëß£Ê±∫Êó•ÊôÇ
  resolvedBy?: string; // Ëß£Ê±∫ËÄÖID
  notes?: string;    // ÁÆ°ÁêÜËÄÖ„É°„É¢
  metadata?: any;    // ËøΩÂä†„ÅÆ„É°„Çø„Éá„Éº„ÇøÔºà„É¨„Éº„ÉàÂà∂ÈôêÊÉÖÂ†±„Å™„Å©Ôºâ
}

const APIErrorSchema: Schema = new Schema({
  endpoint: {
    type: String,
    required: true,
    index: true
  },
  method: {
    type: String,
    required: true,
    enum: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS', 'HEAD']
  },
  statusCode: {
    type: Number,
    required: true,
    index: true
  },
  errorType: {
    type: String,
    required: true,
    enum: [
      'validation',      // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº
      'authentication',  // Ë™çË®º„Ç®„É©„Éº
      'authorization',   // Ë™çÂèØ„Ç®„É©„Éº
      'not_found',      // „É™„ÇΩ„Éº„ÇπÊú™Áô∫Ë¶ã
      'rate_limit',     // „É¨„Éº„ÉàÂà∂Èôê
      'server_error',   // „Çµ„Éº„Éê„Éº„Ç®„É©„Éº
      'database_error', // „Éá„Éº„Çø„Éô„Éº„Çπ„Ç®„É©„Éº
      'external_api',   // Â§ñÈÉ®APIÈÄ£Êê∫„Ç®„É©„Éº
      'timeout',        // „Çø„Ç§„É†„Ç¢„Ç¶„Éà
      'unknown'         // „Åù„ÅÆ‰ªñ
    ],
    index: true
  },
  errorMessage: {
    type: String,
    required: true
  },
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    index: true
  },
  userAgent: String,
  ipAddress: String,
  requestBody: Schema.Types.Mixed,
  stackTrace: String,
  responseTime: {
    type: Number,
    required: true,
    default: 0
  },
  timestamp: {
    type: Date,
    required: true,
    default: Date.now,
    index: true
  },
  resolved: {
    type: Boolean,
    default: false,
    index: true
  },
  resolvedAt: Date,
  resolvedBy: {
    type: Schema.Types.ObjectId,
    ref: 'User'
  },
  notes: String,
  metadata: {
    type: Schema.Types.Mixed,
    default: {}
  }
}, {
  timestamps: true,
  collection: 'api_errors'
});

// Ë§áÂêà„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
APIErrorSchema.index({ timestamp: -1, statusCode: 1 });
APIErrorSchema.index({ endpoint: 1, timestamp: -1 });
APIErrorSchema.index({ errorType: 1, timestamp: -1 });
APIErrorSchema.index({ resolved: 1, timestamp: -1 });

// Áµ±Ë®àÂèñÂæóÁî®„ÅÆÈùôÁöÑ„É°„ÇΩ„ÉÉ„Éâ
APIErrorSchema.statics.getErrorStats = async function(timeRange: string = '24h') {
  let startDate: Date | null = null;
  const endDate = new Date();

  switch (timeRange) {
    case '1h':
      startDate = new Date(Date.now() - 60 * 60 * 1000);
      break;
    case '24h':
      startDate = new Date(Date.now() - 24 * 60 * 60 * 1000);
      break;
    case '7d':
      startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
      break;
    case '30d':
      startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
      break;
    case 'all':
      // ÂÖ®ÊúüÈñì„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæó
      startDate = null;
      break;
    default:
      startDate = new Date(Date.now() - 24 * 60 * 60 * 1000);
  }

  const matchCondition: any = {};
  if (startDate) {
    matchCondition.timestamp = { $gte: startDate, $lte: endDate };
  }

  const pipeline = [
    {
      $match: matchCondition
    },
    {
      $group: {
        _id: null,
        totalErrors: { $sum: 1 },
        unresolvedErrors: {
          $sum: { $cond: [{ $eq: ['$resolved', false] }, 1, 0] }
        },
        avgResponseTime: { $avg: '$responseTime' },
        errorsByType: {
          $push: {
            type: '$errorType',
            statusCode: '$statusCode',
            endpoint: '$endpoint'
          }
        }
      }
    }
  ];

  const result = await this.aggregate(pipeline);
  
  if (result.length === 0) {
    return {
      totalErrors: 0,
      unresolvedErrors: 0,
      avgResponseTime: 0,
      errorsByType: {},
      errorsByStatus: {},
      topErrorEndpoints: []
    };
  }

  const stats = result[0];
  
  // „Ç®„É©„Éº„Çø„Ç§„ÉóÂà•ÈõÜË®à
  const errorsByType = {};
  const errorsByStatus = {};
  const endpointCounts = {};
  
  stats.errorsByType.forEach((error: any) => {
    errorsByType[error.type] = (errorsByType[error.type] || 0) + 1;
    errorsByStatus[error.statusCode] = (errorsByStatus[error.statusCode] || 0) + 1;
    endpointCounts[error.endpoint] = (endpointCounts[error.endpoint] || 0) + 1;
  });

  // „Éà„ÉÉ„Éó„Ç®„É©„Éº„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
  const topErrorEndpoints = Object.entries(endpointCounts)
    .sort(([,a], [,b]) => (b as number) - (a as number))
    .slice(0, 5)
    .map(([endpoint, count]) => ({ endpoint, count }));

  return {
    totalErrors: stats.totalErrors,
    unresolvedErrors: stats.unresolvedErrors,
    avgResponseTime: Math.round(stats.avgResponseTime),
    errorsByType,
    errorsByStatus,
    topErrorEndpoints
  };
};

// „Ç®„É©„Éº„É≠„Ç∞Ë®òÈå≤Áî®„ÅÆÈùôÁöÑ„É°„ÇΩ„ÉÉ„Éâ
APIErrorSchema.statics.logError = async function(errorData: {
  endpoint: string;
  method: string;
  statusCode: number;
  errorType: string;
  errorMessage: string;
  userId?: string;
  userAgent?: string;
  ipAddress?: string;
  requestBody?: any;
  stackTrace?: string;
  responseTime?: number;
  metadata?: any;
}) {
  try {
    // Ê©üÂØÜÊÉÖÂ†±„ÇíÈô§Â§ñ
    const sanitizedRequestBody = errorData.requestBody ? 
      JSON.parse(JSON.stringify(errorData.requestBody, (key, value) => {
        // „Éë„Çπ„ÉØ„Éº„Éâ„ÄÅ„Éà„Éº„ÇØ„É≥„ÄÅÁßòÂØÜÊÉÖÂ†±„ÇíÈô§Â§ñ
        if (['password', 'token', 'secret', 'key', 'authorization'].some(secret => 
          key.toLowerCase().includes(secret))) {
          return '[REDACTED]';
        }
        return value;
      })) : undefined;

    const error = new this({
      ...errorData,
      requestBody: sanitizedRequestBody,
      responseTime: errorData.responseTime || 0,
      stackTrace: process.env.NODE_ENV === 'development' ? errorData.stackTrace : undefined,
      metadata: errorData.metadata || {}
    });

    await error.save();
    
    console.log(`üö® API Error logged: ${errorData.method} ${errorData.endpoint} - ${errorData.statusCode}`);
    
    return error;
  } catch (logError) {
    console.error('‚ùå Failed to log API error:', logError);
  }
};

export const APIErrorModel = mongoose.model<IAPIError>('APIError', APIErrorSchema);