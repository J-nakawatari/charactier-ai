version: '3.8'

services:
  # Nginx (リバースプロキシ)
  nginx:
    image: nginx:1.24-alpine
    container_name: charactier-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ../uploads:/var/www/uploads:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - charactier-network

  # フロントエンド (Next.js)
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
    container_name: charactier-frontend
    environment:
      - NODE_ENV=production
      - PORT=3000
      - BACKEND_URL=http://backend:5000
    env_file:
      - .env
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - charactier-network

  # バックエンド (Express.js)
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    container_name: charactier-backend
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://mongodb:27017/charactier
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    volumes:
      - ../uploads:/app/uploads
    depends_on:
      - mongodb
      - redis
    restart: unless-stopped
    networks:
      - charactier-network

  # MongoDB
  mongodb:
    image: mongo:6
    container_name: charactier-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=charactier
    volumes:
      - mongodb-data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    restart: unless-stopped
    networks:
      - charactier-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: charactier-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --appendfsync everysec
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - charactier-network

volumes:
  mongodb-data:
  redis-data:

networks:
  charactier-network:
    driver: bridge