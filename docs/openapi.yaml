openapi: 3.0.0
info:
  title: Charactier API
  version: 1.0.0
  description: >
    CharactierサービスのAPI仕様書。すべてのエンドポイントはJWT認証または開発用Mock認証を利用します。
    
    ## 環境設定
    
    ### 本番環境での環境変数
    - NEXT_PUBLIC_API_URL: フロントエンドから使用するAPIベースURL
    - BACKEND_URL: サーバーサイドで使用するAPIベースURL
    - NEXT_PUBLIC_IMAGE_DOMAIN: 画像配信ドメイン
    
    ### CORS設定
    本番環境では適切なオリジン制限を設定してください。

servers:
  - url: http://localhost:3004
    description: ローカル開発環境
  - url: https://api.charactier.com
    description: 本番環境API
  - url: https://staging-api.charactier.com
    description: ステージング環境API

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    mockAuth:
      type: apiKey
      in: header
      name: x-auth-token

security:
  - bearerAuth: []

paths:
  /api/ping:
    get:
      summary: サーバー動作確認
      responses:
        '200':
          description: pong
          content:
            text/plain:
              schema:
                type: string
                example: pong

  /api/characters:
    get:
      summary: キャラクター一覧取得（検索・フィルタ・ソート対応）
      security:
        - mockAuth: []
      parameters:
        - in: query
          name: locale
          schema:
            type: string
        - in: query
          name: sort
          schema:
            type: string
        - in: query
          name: keyword
          schema:
            type: string
      responses:
        '200':
          description: キャラクター一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  characters:
                    type: array
                    items:
                      $ref: '#/components/schemas/Character'
                  filters:
                    type: object
                    properties:
                      characterTypes:
                        type: array
                        items:
                          type: string
    post:
      summary: キャラクター作成（管理者のみ）
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
              properties:
                name:
                  type: object
                  properties:
                    ja:
                      type: string
                    en:
                      type: string
                description:
                  type: object
                  properties:
                    ja:
                      type: string
                    en:
                      type: string
                characterAccessType:
                  type: string
                  enum: [free, purchaseOnly]
                  default: free
                model:
                  type: string
                  enum: [gpt-3.5-turbo, gpt-4o, gpt-4o-mini]
                  default: gpt-4o-mini
                personalityPreset:
                  type: string
                personalityTags:
                  type: array
                  items:
                    type: string
                themeColor:
                  type: string
                  pattern: "^#[0-9A-Fa-f]{6}$"
      responses:
        '201':
          description: キャラクター作成成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  character:
                    $ref: '#/components/schemas/Character'

  /api/characters/{id}:
    get:
      summary: 個別キャラクター取得
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: キャラクター詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'

  /api/characters/{id}/affinity-images:
    get:
      summary: キャラクターの親密度画像取得
      description: 指定されたキャラクターの親密度レベルに応じた画像ギャラリーを取得します。ユーザーの親密度レベルに基づいて解放済み/未解放の画像を分けて返します。
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: キャラクターID
      responses:
        '200':
          description: 親密度画像一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  images:
                    type: array
                    items:
                      $ref: '#/components/schemas/GalleryImage'
                  userAffinityLevel:
                    type: integer
                    description: ユーザーの現在の親密度レベル
                  totalImages:
                    type: integer
                    description: 総画像数
                  unlockedCount:
                    type: integer
                    description: 解放済み画像数
        '404':
          description: キャラクターが見つかりません
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string

  /api/auth/register:
    post:
      summary: ユーザー新規登録
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                name:
                  type: string
                  description: ユーザー名（空文字の場合は後で設定）
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
      responses:
        '201':
          description: 登録成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  tokens:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string

  /api/auth/login:
    post:
      summary: ユーザーログイン
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: ログイン成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  tokens:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string

  /api/auth/refresh:
    post:
      summary: アクセストークンリフレッシュ
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: リフレッシュ成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string

  /api/user/profile:
    get:
      summary: ユーザープロフィール取得
      security:
        - bearerAuth: []
        - mockAuth: []
      responses:
        '200':
          description: プロフィール取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  tokenBalance:
                    type: number
                  totalPurchased:
                    type: number
                  totalUsed:
                    type: number
                  affinities:
                    type: array
                    items:
                      $ref: '#/components/schemas/AffinityData'
                  recentChats:
                    type: array
                    items:
                      type: object
    put:
      summary: ユーザープロフィール更新（名前設定）
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: ユーザー名
      responses:
        '200':
          description: プロフィール更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  /api/user/setup-complete:
    post:
      summary: 初回セットアップ完了
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - selectedCharacterId
              properties:
                name:
                  type: string
                  description: ユーザー名
                selectedCharacterId:
                  type: string
                  description: 選択したキャラクターID
      responses:
        '200':
          description: セットアップ完了
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  /api/user/dashboard:
    get:
      summary: ユーザーダッシュボードデータ取得
      security:
        - bearerAuth: []
        - mockAuth: []
      responses:
        '200':
          description: ダッシュボードデータ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardResponse'
        '401':
          description: 認証エラー
        '500':
          description: サーバーエラー

  /api/user/select-character:
    post:
      summary: キャラクター選択・アクセス権限チェック
      security:
        - bearerAuth: []
        - mockAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                characterId:
                  type: string
      responses:
        '200':
          description: キャラ選択成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  selectedCharacter:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        $ref: '#/components/schemas/LocalizedString'
                      characterAccessType:
                        type: string
                      accessReason:
                        type: string
                  userState:
                    type: object
                    properties:
                      selectedCharacterId:
                        type: string
                      tokenBalance:
                        type: number
                      hasAccess:
                        type: boolean
                  metadata:
                    type: object
                    properties:
                      previousSelection:
                        type: string
                      selectionTime:
                        type: string
                        format: date-time
                      isFirstSelection:
                        type: boolean
        '403':
          description: アクセス権限なし
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: string
                  reason:
                    type: string
  /api/chats/{characterId}:
    get:
      summary: チャット履歴と親密度情報を取得
      security:
        - bearerAuth: []
      parameters:
        - name: characterId
          in: path
          required: true
          schema:
            type: string
        - name: locale
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: チャット履歴取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  chat:
                    type: object
                    properties:
                      _id:
                        type: string
                      messages:
                        type: array
                        items:
                          type: object
                  character:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: object
                        additionalProperties:
                          type: string
                      personality:
                        type: string

  /api/chats/{characterId}/messages:
    post:
      summary: メッセージ送信・AI応答生成
      security:
        - bearerAuth: []
      parameters:
        - name: characterId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                sessionId:
                  type: string
      responses:
        '200':
          description: 応答成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  userMessage:
                    type: object
                  aiResponse:
                    type: object
                  affinity:
                    type: object

  /api/user/dashboard:
    get:
      summary: ユーザーダッシュボード統合データ取得
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ダッシュボードデータ
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                  tokens:
                    type: object

  /api/user/change-password:
    put:
      summary: ユーザーパスワード変更
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  description: 現在のパスワード
                newPassword:
                  type: string
                  description: 新しいパスワード（8文字以上）
              required:
                - currentPassword
                - newPassword
      responses:
        '200':
          description: パスワード変更成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
        '401':
          description: 現在のパスワードが間違っている
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string

  /api/user/delete-account:
    delete:
      summary: ユーザーアカウント削除（退会）
      security:
        - bearerAuth: []
      responses:
        '200':
          description: アカウント削除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
                  affinities:
                    type: array
                    items:
                      type: object
                  recentChats:
                    type: array
                    items:
                      type: object

  /api/user/purchase-history:
    get:
      summary: 購入履歴取得
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 購入履歴情報
          content:
            application/json:
              schema:
                type: object
                properties:
                  purchases:
                    type: array
                    items:
                      type: object
                  totalSpent:
                    type: number
                  totalPurchases:
                    type: number
                  summary:
                    type: object

  /api/notifications:
    get:
      summary: ユーザー向けお知らせ一覧取得
      description: ログインユーザーが対象のお知らせ一覧を取得します。既読/未読状態も含みます。
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
          description: 取得件数
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: オフセット
        - name: type
          in: query
          schema:
            type: string
            enum: [info, warning, success, urgent, maintenance, feature, event]
          description: お知らせタイプでフィルタ
      responses:
        '200':
          description: お知らせ一覧取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserNotification'
                  unreadCount:
                    type: integer
                  total:
                    type: integer

  /api/notifications/unread-count:
    get:
      summary: 未読お知らせ件数取得
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 未読件数取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  unreadCount:
                    type: integer

  /api/notifications/{id}/read:
    post:
      summary: お知らせ既読マーク
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: お知らせID
      responses:
        '200':
          description: 既読マーク成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /api/notifications/read-all:
    post:
      summary: 全お知らせ既読マーク
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 全件既読マーク成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  markedCount:
                    type: integer

  /admin/notifications:
    get:
      summary: 管理者用お知らせ一覧取得
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: type
          in: query
          schema:
            type: string
            enum: [info, warning, success, urgent, maintenance, feature, event]
        - name: isActive
          in: query
          schema:
            type: boolean
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: お知らせ一覧取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: integer
                      totalPages:
                        type: integer
                      totalItems:
                        type: integer
    post:
      summary: お知らせ作成
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationCreate'
      responses:
        '201':
          description: お知らせ作成成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification:
                    $ref: '#/components/schemas/Notification'

  /admin/notifications/{id}:
    get:
      summary: 個別お知らせ取得
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: お知らせ取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
    put:
      summary: お知らせ更新
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUpdate'
      responses:
        '200':
          description: お知らせ更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
    delete:
      summary: お知らせ削除
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: お知らせ削除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean

  /admin/notifications/{id}/stats:
    get:
      summary: お知らせ統計取得
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 統計取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationStats'

  /api/debug:
    get:
      summary: 環境変数デバッグ情報
      responses:
        '200':
          description: サーバー設定情報
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true

  /admin/sanctions/users:
    get:
      summary: 制裁対象ユーザー一覧取得
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
            enum: [active, lifted]
      responses:
        '200':
          description: ユーザー一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                  pagination:
                    type: object

  /admin/sanctions/users/{userId}/violations:
    get:
      summary: 特定ユーザーの違反履歴取得
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: 違反履歴
          content:
            application/json:
              schema:
                type: object
                properties:
                  violations:
                    type: array
                    items:
                      type: object
                  user:
                    type: object

  /admin/sanctions/users/{userId}/lift:
    post:
      summary: 制裁解除
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        '200':
          description: 制裁解除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /admin/sanctions/users/{userId}/reset-violations:
    post:
      summary: 違反記録リセット
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: リセット成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  violationsRemoved:
                    type: number

  /admin/sanctions/stats:
    get:
      summary: 制裁統計情報取得
      security:
        - bearerAuth: []
      parameters:
        - name: timeframe
          in: query
          schema:
            type: string
            enum: [day, week, month]
      responses:
        '200':
          description: 制裁統計情報
          content:
            application/json:
              schema:
                type: object
                properties:
                  overview:
                    type: object
                  violationsByType:
                    type: object
                  sanctionLevels:
                    type: object

  /admin/sanctions/levels:
    get:
      summary: 制裁レベル情報取得
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 制裁レベル一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  levels:
                    type: array
                    items:
                      type: object

  /admin/users:
    get:
      summary: 管理者用ユーザー一覧取得
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, suspended]
      responses:
        '200':
          description: ユーザー一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                        tokenBalance:
                          type: number
                        totalSpent:
                          type: number
                        chatCount:
                          type: number
                        avgIntimacy:
                          type: number
                        lastLogin:
                          type: string
                          format: date-time
                        status:
                          type: string
                        isTrialUser:
                          type: boolean
                        createdAt:
                          type: string
                          format: date-time
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      totalPages:
                        type: integer

  /admin/users/{userId}/reset-tokens:
    post:
      summary: ユーザーのトークン残高をゼロにリセット（一時的機能）
      description: "⚠️ 本番環境では削除される一時的な開発機能"
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: トークンリセット成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  previousBalance:
                    type: number
        '404':
          description: ユーザーが見つかりません

  /api/admin/token-packs:
    get:
      summary: トークンパック一覧取得
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: isActive
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: トークンパック一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokenPacks:
                    type: array
                    items:
                      $ref: '#/components/schemas/TokenPack'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
    post:
      summary: トークンパック作成
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: パック名
                  example: "Premium Pack"
                description:
                  type: string
                  description: パックの説明
                tokens:
                  type: integer
                  description: トークン数（GPT-4.1 mini原価モデル：1円あたり約666.67トークン、利益率80%）
                  example: 666666
                price:
                  type: integer
                  description: 価格（円）
                  example: 1000
                purchaseAmountYen:
                  type: integer
                  description: 購入金額（円）- priceと同じ値
                  example: 1000
                tokensPurchased:
                  type: integer
                  description: 購入トークン数 - tokensと同じ値（GPT-4.1 mini原価モデル）
                  example: 666666
                priceId:
                  type: string
                  description: Stripe Price ID（オプション）
                isActive:
                  type: boolean
                  description: アクティブ状態
                  default: true
              required:
                - name
                - tokens
                - price
      responses:
        '201':
          description: トークンパック作成成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  created:
                    $ref: '#/components/schemas/TokenPack'
        '400':
          description: バリデーションエラー（80%利益ルール違反等）
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "GPT-4.1 mini原価モデル違反: 指定された価格とトークン数の組み合わせが適切ではありません。1円あたり約666.67トークンが基準です。"

  /api/admin/token-packs/{id}:
    get:
      summary: トークンパック詳細取得
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: トークンパック詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPack'
        '404':
          description: トークンパックが見つかりません
    put:
      summary: トークンパック更新
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                tokens:
                  type: integer
                price:
                  type: integer
                priceId:
                  type: string
                isActive:
                  type: boolean
      responses:
        '200':
          description: トークンパック更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPack'
        '400':
          description: バリデーションエラー（80%利益ルール違反等）
        '404':
          description: トークンパックが見つかりません
    delete:
      summary: トークンパック削除
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 削除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: トークンパックが見つかりません

  /api/admin/models:
    get:
      summary: 利用可能なGPTモデル一覧取得
      security:
        - bearerAuth: []
      responses:
        '200':
          description: モデル一覧と料金情報
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  models:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          enum: [gpt-3.5-turbo, gpt-4o-mini]
                        name:
                          type: string
                        description:
                          type: string
                        cost:
                          type: string
                        recommended:
                          type: boolean
                        tokensPerYen:
                          type: number
                        sampleTokens:
                          type: object
                          properties:
                            500:
                              type: number
                            1000:
                              type: number
                            2000:
                              type: number
                  currentModel:
                    type: string

  /api/admin/models/current:
    get:
      summary: 現在のモデル設定取得
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 現在のモデル情報
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  currentModel:
                    type: string
                  modelInfo:
                    type: object
                  tokensPerYen:
                    type: number
                  sampleCalculation:
                    type: object

  /api/admin/models/set-model:
    post:
      summary: GPTモデル設定変更（管理者のみ）
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - model
              properties:
                model:
                  type: string
                  enum: [gpt-3.5-turbo, gpt-4o-mini]
                  description: 設定するGPTモデル
      responses:
        '200':
          description: モデル変更成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /api/admin/system/health:
    get:
      summary: サーバーヘルスチェック（管理者のみ）
      security:
        - bearerAuth: []
      responses:
        '200':
          description: システム状態情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemHealth'
        '401':
          description: 認証エラー
        '403':
          description: 権限エラー

  /api/admin/system/monitoring:
    get:
      summary: サーバー監視データ取得（管理者のみ）
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: period
          schema:
            type: string
            enum: [1h, 6h, 24h, 7d]
            default: 1h
          description: 監視期間
      responses:
        '200':
          description: 監視データ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitoringData'
                  newModel:
                    type: string
                  tokensPerYen:
                    type: number
                  note:
                    type: string
        '400':
          description: 無効なモデル指定

  /api/admin/models/simulate:
    post:
      summary: モデル別料金シミュレーション
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - model
                - purchaseAmount
              properties:
                model:
                  type: string
                  enum: [gpt-3.5-turbo, gpt-4o-mini]
                purchaseAmount:
                  type: number
                  description: 購入金額（円）
      responses:
        '200':
          description: シミュレーション結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  simulation:
                    type: object
                    properties:
                      model:
                        type: string
                      modelInfo:
                        type: object
                      purchaseAmount:
                        type: number
                      tokensToGive:
                        type: number
                      profitMargin:
                        type: number
                      costRatio:
                        type: number

  # ======================================
  # 購入関連API（実装済みだが仕様書未定義）
  # ======================================
  
  /api/purchase/create-checkout-session:
    post:
      summary: Stripe チェックアウトセッション作成
      description: トークンパックまたはキャラクター購入のためのStripeチェックアウトセッションを作成します
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [token, character]
                  description: 購入タイプ
                priceId:
                  type: string
                  description: Stripe価格ID
                characterId:
                  type: string
                  description: キャラクターID（キャラクター購入時のみ）
              required:
                - type
                - priceId
      responses:
        '200':
          description: チェックアウトセッション作成成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: StripeチェックアウトページURL
        '400':
          description: バリデーションエラー
        '500':
          description: サーバーエラー

  /api/purchase/events/{sessionId}:
    get:
      summary: 購入完了リアルタイム通知（SSE）
      description: Server-Sent Eventsを使用してStripe決済完了をリアルタイムで通知
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: Stripe セッションID
      responses:
        '200':
          description: SSEストリーム
          content:
            text/event-stream:
              schema:
                type: string
                description: SSEイベントストリーム
        '404':
          description: セッションが見つからない

  /api/purchase/session/{sessionId}:
    get:
      summary: Stripe セッション情報取得
      description: 指定されたセッションIDの購入情報を取得
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: セッション情報
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokens:
                    type: number
                    description: 購入トークン数
                  type:
                    type: string
                    enum: [token, character]
                  characterId:
                    type: string
                    description: キャラクターID（キャラクター購入時）

  # ======================================
  # バッジ関連API（実装済みだが仕様書未定義）
  # ======================================
  
  /api/badges:
    get:
      summary: ユーザーバッジ一覧取得
      security:
        - bearerAuth: []
      responses:
        '200':
          description: バッジ一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  badges:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserBadge'

  # ======================================
  # 親密度リセット関連API（実装済みだが仕様書未定義）
  # ======================================
  
  /api/user/reset-affinity:
    post:
      summary: キャラクター親密度リセット
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                characterId:
                  type: string
              required:
                - characterId
      responses:
        '200':
          description: リセット成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  # ======================================
  # 管理者ダッシュボード統計API
  # ======================================
  
  /api/admin/dashboard/stats:
    get:
      summary: 管理者ダッシュボード統計情報取得
      description: ダッシュボードに表示する各種統計情報を取得します
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 統計情報取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  stats:
                    type: object
                    properties:
                      totalUsers:
                        type: number
                        description: 総ユーザー数
                      activeUsers:
                        type: number
                        description: アクティブユーザー数（7日以内にログイン）
                      totalTokensUsed:
                        type: number
                        description: 総トークン使用量
                      totalCharacters:
                        type: number
                        description: 総キャラクター数
                      apiErrors:
                        type: number
                        description: APIエラー数（24時間以内）
                  trends:
                    type: object
                    properties:
                      userGrowth:
                        type: number
                        description: ユーザー成長率（%）
                      tokenUsageGrowth:
                        type: number
                        description: トークン使用量成長率（%）
                      apiErrorTrend:
                        type: number
                        description: APIエラー増減率（%）
                      characterPopularity:
                        type: number
                        description: キャラクター利用率成長（%）
                  financial:
                    type: object
                    properties:
                      totalRevenue:
                        type: number
                        description: 総売上
                      availableBalance:
                        type: number
                        description: 利用可能残高
                      creditLimit:
                        type: number
                        description: クレジット上限
                      outstandingDebt:
                        type: number
                        description: 未払い債務
                      projectedBalance14Days:
                        type: number
                        description: 14日後予測残高
                  evaluation:
                    type: object
                    properties:
                      overallScore:
                        type: number
                        description: 総合評価スコア（0-100）
                      breakdown:
                        type: object
                        properties:
                          excellent:
                            type: number
                            description: 優秀（%）
                          good:
                            type: number
                            description: 良好（%）
                          needsImprovement:
                            type: number
                            description: 要改善（%）
        '401':
          description: 認証エラー
        '403':
          description: 権限エラー

  /api/admin/characters/update-stats:
    post:
      summary: キャラクター統計情報更新
      description: 全キャラクターの統計情報（totalMessages、averageAffinityLevel等）を集計・更新します
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 統計更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  updated:
                    type: number
                    description: 更新されたキャラクター数
                  stats:
                    type: object
                    properties:
                      totalCharacters:
                        type: number
                      totalMessages:
                        type: number
                      averageMessages:
                        type: number
        '401':
          description: 認証エラー
        '403':
          description: 権限エラー

  # ======================================
  # 管理者ユーザー関連API修正
  # ======================================
  
  /api/admin/users:
    get:
      summary: 管理者用ユーザー一覧取得（修正版）
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, suspended]
      responses:
        '200':
          description: ユーザー一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/AdminUserView'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
                  tokenStats:
                    type: object
                    properties:
                      totalBalance:
                        type: number
                        description: 全ユーザーのトークン残高合計
                      totalUsers:
                        type: number
                        description: 対象ユーザー数
                      averageBalance:
                        type: number
                        description: 平均トークン残高
components:
  schemas:

    DashboardResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
            email:
              type: string
            createdAt:
              type: string
              format: date-time
            lastLoginAt:
              type: string
              format: date-time
        tokens:
          type: object
          properties:
            balance:
              type: number
            totalPurchased:
              type: number
            totalUsed:
              type: number
            recentUsage:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date
                  amount:
                    type: number
        affinities:
          type: array
          items:
            type: object
            properties:
              character:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    $ref: '#/components/schemas/LocalizedString'
                  imageCharacterSelect:
                    type: string
                  themeColor:
                    type: string
              level:
                type: number
              experience:
                type: number
              experienceToNext:
                type: number
              maxExperience:
                type: number
              unlockedImages:
                type: array
                items:
                  type: string
              nextUnlockLevel:
                type: number
        recentChats:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              character:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    $ref: '#/components/schemas/LocalizedString'
                  imageCharacterSelect:
                    type: string
              lastMessage:
                type: string
              lastMessageAt:
                type: string
                format: date-time
              messageCount:
                type: number
        purchaseHistory:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [token, character]
              amount:
                type: number
              date:
                type: string
                format: date-time
              details:
                type: string
        loginHistory:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date-time
              platform:
                type: string
                enum: [web, mobile]
              ipAddress:
                type: string
        notifications:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              title:
                $ref: '#/components/schemas/LocalizedString'
              message:
                $ref: '#/components/schemas/LocalizedString'
              type:
                type: string
                enum: [info, warning, success]
              isRead:
                type: boolean
              createdAt:
                type: string
                format: date-time
        badges:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              name:
                $ref: '#/components/schemas/LocalizedString'
              description:
                $ref: '#/components/schemas/LocalizedString'
              iconUrl:
                type: string
              isUnlocked:
                type: boolean
              unlockedAt:
                type: string
                format: date-time
              progress:
                type: number
              maxProgress:
                type: number
        analytics:
          type: object
          properties:
            chatCountPerDay:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date
                  count:
                    type: number
            tokenUsagePerDay:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date
                  amount:
                    type: number
            affinityProgress:
              type: array
              items:
                type: object
                properties:
                  characterName:
                    type: string
                  level:
                    type: number
                  color:
                    type: string

    LocalizedString:
      type: object
      properties:
        ja:
          type: string
        en:
          type: string

    BaseCharacter:
      type: object
      required:
        - _id
        - name
        - description
        - characterAccessType
        - aiModel
        - isActive
        - createdAt
      properties:
        _id:
          type: string
        name:
          $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
        characterAccessType:
          type: string
          enum: [free, purchaseOnly]
        aiModel:
          type: string
        personalityPreset:
          type: string
        personalityTags:
          type: array
          items:
            type: string
        gender:
          type: string
        themeColor:
          type: string
        imageCharacterSelect:
          type: string
        imageChatAvatar:
          type: string
        imageChatBackground:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Character:
      allOf:
        - $ref: '#/components/schemas/BaseCharacter'
        - type: object
          properties:
            stripeProductId:
              type: string
            currentMood:
              type: string
              enum: [happy, sad, angry, shy, excited]
            affinityStats:
              type: object
              properties:
                totalUsers:
                  type: number
                averageLevel:
                  type: number
                maxLevelUsers:
                  type: number

    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        tokenBalance:
          type: number
        selectedCharacter:
          type: string
          description: 選択中のキャラクターID
        isSetupComplete:
          type: boolean
          description: 初回セットアップ完了フラグ
          default: false

    TokenStats:
      type: object
      properties:
        balance:
          type: number
        totalPurchased:
          type: number
        totalUsed:
          type: number
        recentUsage:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
              amount:
                type: number

    Affinity:
      type: object
      properties:
        character:
          $ref: '#/components/schemas/Character'
        level:
          type: number
        experience:
          type: number
        experienceToNext:
          type: number

    TokenPack:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        tokens:
          type: integer
          minimum: 1
        price:
          type: integer
          minimum: 1
        priceId:
          type: string
          description: Stripe Price ID
        isActive:
          type: boolean
          default: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        profitMargin:
          type: number
          description: 利益率（自動計算）
          readOnly: true
        tokenPerYen:
          type: number
          description: 1円あたりのトークン数（自動計算）
          readOnly: true
      required:
        - name
        - tokens
        - price

    GalleryImage:
      type: object
      properties:
        url:
          type: string
          description: 画像のURL
        unlockLevel:
          type: integer
          minimum: 0
          maximum: 100
          description: 解放に必要な親密度レベル
        title:
          type: object
          properties:
            ja:
              type: string
            en:
              type: string
          description: 画像のタイトル（多言語対応）
        description:
          type: object
          properties:
            ja:
              type: string
            en:
              type: string
          description: 画像の説明（多言語対応）
        rarity:
          type: string
          enum: [common, rare, epic, legendary]
          default: common
          description: 画像のレア度
        tags:
          type: array
          items:
            type: string
          description: 画像に関連するタグ
        isDefault:
          type: boolean
          default: false
          description: デフォルト画像かどうか
        order:
          type: integer
          default: 0
          description: 表示順序
        createdAt:
          type: string
          format: date-time
          description: 作成日時
      required:
        - url
        - unlockLevel
        - title
        - description

    Notification:
      type: object
      properties:
        _id:
          type: string
          description: お知らせID
        title:
          type: object
          properties:
            ja:
              type: string
            en:
              type: string
          description: タイトル（多言語対応）
        message:
          type: object
          properties:
            ja:
              type: string
            en:
              type: string
          description: メッセージ（多言語対応）
        type:
          type: string
          enum: [info, warning, success, urgent, maintenance, feature, event]
          description: お知らせタイプ
        isActive:
          type: boolean
          description: 公開状態
        isPinned:
          type: boolean
          description: 重要お知らせフラグ
        priority:
          type: integer
          minimum: 0
          maximum: 100
          description: 表示優先度
        targetCondition:
          type: object
          properties:
            type:
              type: string
              enum: [all, specific_users, user_level, purchase_history, registration_date]
            userIds:
              type: array
              items:
                type: string
            minLevel:
              type: integer
            maxLevel:
              type: integer
            hasPurchases:
              type: boolean
            registeredAfter:
              type: string
              format: date-time
            registeredBefore:
              type: string
              format: date-time
          description: 対象ユーザー条件
        validFrom:
          type: string
          format: date-time
          description: 有効開始日時
        validUntil:
          type: string
          format: date-time
          description: 有効終了日時
        totalTargetUsers:
          type: integer
          description: 対象ユーザー数
        totalViews:
          type: integer
          description: 総表示回数
        totalReads:
          type: integer
          description: 総既読回数
        createdBy:
          type: string
          description: 作成者ID
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - title
        - message
        - type

    NotificationCreate:
      type: object
      properties:
        title:
          type: object
          properties:
            ja:
              type: string
              maxLength: 500
            en:
              type: string
              maxLength: 500
          description: タイトル（多言語対応）
        message:
          type: object
          properties:
            ja:
              type: string
              maxLength: 500
            en:
              type: string
              maxLength: 500
          description: メッセージ（多言語対応）
        type:
          type: string
          enum: [info, warning, success, urgent, maintenance, feature, event]
          default: info
          description: お知らせタイプ
        isPinned:
          type: boolean
          default: false
          description: 重要お知らせフラグ
        priority:
          type: integer
          minimum: 0
          maximum: 100
          default: 0
          description: 表示優先度
        targetCondition:
          type: object
          properties:
            type:
              type: string
              enum: [all, specific_users, user_level, purchase_history, registration_date]
              default: all
            userIds:
              type: array
              items:
                type: string
            minLevel:
              type: integer
            maxLevel:
              type: integer
            hasPurchases:
              type: boolean
            registeredAfter:
              type: string
              format: date-time
            registeredBefore:
              type: string
              format: date-time
          description: 対象ユーザー条件
        validFrom:
          type: string
          format: date-time
          description: 有効開始日時
        validUntil:
          type: string
          format: date-time
          description: 有効終了日時
      required:
        - title
        - message
        - type

    NotificationUpdate:
      type: object
      properties:
        title:
          type: object
          properties:
            ja:
              type: string
              maxLength: 500
            en:
              type: string
              maxLength: 500
        message:
          type: object
          properties:
            ja:
              type: string
              maxLength: 500
            en:
              type: string
              maxLength: 500
        type:
          type: string
          enum: [info, warning, success, urgent, maintenance, feature, event]
        isActive:
          type: boolean
        isPinned:
          type: boolean
        priority:
          type: integer
          minimum: 0
          maximum: 100
        targetCondition:
          type: object
          properties:
            type:
              type: string
              enum: [all, specific_users, user_level, purchase_history, registration_date]
            userIds:
              type: array
              items:
                type: string
            minLevel:
              type: integer
            maxLevel:
              type: integer
            hasPurchases:
              type: boolean
            registeredAfter:
              type: string
              format: date-time
            registeredBefore:
              type: string
              format: date-time
        validFrom:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time

    NotificationStats:
      type: object
      properties:
        notificationId:
          type: string
        totalTargetUsers:
          type: integer
          description: 対象ユーザー数
        totalViews:
          type: integer
          description: 総表示回数
        totalReads:
          type: integer
          description: 総既読回数
        readRate:
          type: number
          description: 既読率（%）
        viewRate:
          type: number
          description: 表示率（%）
        dailyStats:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              views:
                type: integer
              reads:
                type: integer
          description: 日別統計
        userSegmentStats:
          type: array
          items:
            type: object
            properties:
              segment:
                type: string
              userCount:
                type: integer
              readCount:
                type: integer
              readRate:
                type: number
          description: ユーザーセグメント別統計

    UserNotification:
      type: object
      properties:
        _id:
          type: string
        title:
          type: object
          properties:
            ja:
              type: string
            en:
              type: string
        message:
          type: object
          properties:
            ja:
              type: string
            en:
              type: string
        type:
          type: string
          enum: [info, warning, success, urgent, maintenance, feature, event]
        isPinned:
          type: boolean
        priority:
          type: integer
        isRead:
          type: boolean
          description: 既読状態
        isViewed:
          type: boolean
          description: 表示済み状態
        readAt:
          type: string
          format: date-time
          description: 既読日時
        viewedAt:
          type: string
          format: date-time
          description: 表示日時
        createdAt:
          type: string
          format: date-time
        validFrom:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time
      required:
        - _id
        - title
        - message
        - type
        - isRead

    # ======================================
    # 新しいスキーマ定義（実装済みだが仕様書未定義）
    # ======================================

    UserBadge:
      type: object
      properties:
        _id:
          type: string
        name:
          $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
        iconUrl:
          type: string
        isUnlocked:
          type: boolean
        unlockedAt:
          type: string
          format: date-time
        progress:
          type: number
        maxProgress:
          type: number
      required:
        - _id
        - name
        - description
        - isUnlocked

    AdminUserView:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        tokenBalance:
          type: number
        totalSpent:
          type: number
        chatCount:
          type: number
        avgIntimacy:
          type: number
        lastLogin:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, inactive, suspended]
        isTrialUser:
          type: boolean
        createdAt:
          type: string
          format: date-time
        purchasedCharacters:
          type: array
          items:
            type: string
          description: 購入済みキャラクターID配列
      required:
        - _id
        - name
        - email
        - tokenBalance

    PaginationInfo:
      type: object
      properties:
        total:
          type: integer
          description: 総件数
        page:
          type: integer
          description: 現在のページ
        limit:
          type: integer
          description: 1ページあたりの件数
        totalPages:
          type: integer
          description: 総ページ数
        hasNext:
          type: boolean
          description: 次のページが存在するか
        hasPrev:
          type: boolean
          description: 前のページが存在するか
      required:
        - total
        - page
        - limit
        - totalPages

    AffinityData:
      type: object
      properties:
        character:
          type: string
          description: キャラクターID
        level:
          type: number
          minimum: 0
          maximum: 100
          description: 親密度レベル
        experience:
          type: number
          minimum: 0
          description: 経験値
        lastInteractedAt:
          type: string
          format: date-time
          description: 最後の交流日時
        lastVisitStreak:
          type: number
          default: 0
          description: 連続訪問日数
      required:
        - character
        - level
        - experience

    CharacterPurchaseInfo:
      type: object
      properties:
        characterId:
          type: string
        purchaseDate:
          type: string
          format: date-time
        amount:
          type: number
          description: 購入金額
        stripeSessionId:
          type: string
          description: StripeセッションID
      required:
        - characterId
        - purchaseDate
        - amount

    SystemHealth:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, warning, critical]
          description: システム状態
        uptime:
          type: number
          description: サーバー稼働時間（ミリ秒）
        restartCount:
          type: number
          description: 再起動回数
        memoryUsage:
          type: object
          properties:
            percentage:
              type: number
              description: メモリ使用率（%）
            used:
              type: number
              description: 使用メモリ（MB）
            total:
              type: number
              description: 総メモリ（MB）
        errorRate:
          type: number
          description: エラー率（%）
        alerts:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [high_restart_count, suspicious_requests, high_error_rate, memory_warning]
              severity:
                type: string
                enum: [info, warning, critical]
              message:
                type: string
              timestamp:
                type: string
                format: date-time
      required:
        - status
        - uptime
        - restartCount

    MonitoringData:
      type: object
      properties:
        timeRange:
          type: object
          properties:
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
        requestStats:
          type: object
          properties:
            total:
              type: number
            byIp:
              type: array
              items:
                type: object
                properties:
                  ip:
                    type: string
                  count:
                    type: number
                  suspicious:
                    type: boolean
        errorStats:
          type: object
          properties:
            total:
              type: number
            by5xx:
              type: number
            by4xx:
              type: number
            errorRate:
              type: number
        performanceStats:
          type: object
          properties:
            avgResponseTime:
              type: number
              description: 平均レスポンスタイム（ms）
            slowRequests:
              type: number
              description: 遅いリクエスト数（1秒以上）
        restartHistory:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
              reason:
                type: string
