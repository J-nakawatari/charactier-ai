diff --git a/frontend/.eslintrc.json b/frontend/.eslintrc.json
index 290bf51a..a08957c0 100644
--- a/frontend/.eslintrc.json
+++ b/frontend/.eslintrc.json
@@ -7,6 +7,27 @@
         "selector": "TemplateLiteral[quasis.0.value.raw*='/api/']",
         "message": "直書き '/api/' は禁止。API_BASE_URL を使うか '/api/v1/' に統一してください。"
       }
-    ]
-  }
+    ],
+    "@typescript-eslint/no-unused-vars": "off",
+    "no-console": ["warn", { "allow": ["warn", "error", "info"] }]
+  },
+  "overrides": [
+    {
+      "files": ["**/*.ts", "**/*.tsx"],
+      "rules": {
+        "no-restricted-imports": [
+          "error",
+          {
+            "patterns": [
+              {
+                "group": ["next-intl"],
+                "importNames": ["useTranslations"],
+                "message": "Use useTranslations from '@/hooks/useTranslations' instead to ensure type safety"
+              }
+            ]
+          }
+        ]
+      }
+    }
+  ]
 }
\ No newline at end of file
diff --git a/frontend/i18n-enhanced.ts b/frontend/i18n-enhanced.ts
new file mode 100644
index 00000000..200a0c99
--- /dev/null
+++ b/frontend/i18n-enhanced.ts
@@ -0,0 +1,52 @@
+import { getRequestConfig } from 'next-intl/server';
+import { flattenMessages, logAllKeys } from './src/i18n/flattenMessages';
+
+// サポートする言語
+export const locales = ['ja', 'en'] as const;
+export type Locale = (typeof locales)[number];
+
+// 開発環境でのデバッグフラグ
+const DEBUG = process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_I18N_DEBUG === 'true';
+
+export default getRequestConfig(async ({ locale }) => {
+  // localeがundefinedの場合はデフォルトを使用
+  const validLocale = locale && locales.includes(locale as Locale) ? locale : 'ja';
+  
+  try {
+    const messages = (await import(`./messages/${validLocale}.json`)).default;
+    
+    // デバッグモードの場合、利用可能なキーをログ出力
+    if (DEBUG) {
+      logAllKeys(messages, validLocale);
+    }
+
+    // メッセージをフラット化して返す（next-intl v3互換性のため）
+    const flattenedMessages = flattenMessages(messages);
+    
+    return {
+      locale: validLocale,
+      messages: flattenedMessages,
+      // エラー処理を有効化
+      onError(error) {
+        if (error.code === 'MISSING_MESSAGE') {
+          console.error(`[i18n] Missing message: ${error.originalMessage}`);
+        }
+      },
+      // 存在しないキーの場合のフォールバック
+      getMessageFallback({ namespace, key, error }) {
+        const fullKey = [namespace, key].filter(Boolean).join('.');
+        if (DEBUG) {
+          return `[MISSING: ${fullKey}]`;
+        }
+        return fullKey;
+      }
+    };
+  } catch (error) {
+    console.error(`[i18n] Failed to load messages for locale "${validLocale}":`, error);
+    // フォールバックとして空のメッセージを返す
+    return {
+      locale: validLocale,
+      messages: {}
+    };
+  }
+});
\ No newline at end of file
diff --git a/frontend/middleware-enhanced.ts b/frontend/middleware-enhanced.ts
new file mode 100644
index 00000000..4db28c78
--- /dev/null
+++ b/frontend/middleware-enhanced.ts
@@ -0,0 +1,79 @@
+import createMiddleware from 'next-intl/middleware';
+import { NextRequest, NextResponse } from 'next/server';
+import { locales } from './i18n';
+import { i18nLogger } from './src/middleware/logger';
+
+const intlMiddleware = createMiddleware({
+  // サポートする言語
+  locales,
+  
+  // デフォルトの言語
+  defaultLocale: 'ja',
+  
+  // ロケール検出を無効にする（ユーザー選択を優先）
+  localeDetection: false,
+  
+  // 常にロケールプレフィックスを付ける
+  localePrefix: 'always'
+});
+
+export default function middleware(request: NextRequest) {
+  // ユーザーが設定した言語をクッキーから取得
+  const savedLocale = request.cookies.get('NEXT_LOCALE')?.value;
+  
+  // URLから現在のロケールを取得
+  const pathname = request.nextUrl.pathname;
+  const currentLocale = pathname.split('/')[1];
+  
+  // ルートパス（/）の場合の処理
+  if (pathname === '/') {
+    const redirectLocale = savedLocale && locales.includes(savedLocale as any) 
+      ? savedLocale 
+      : 'ja';
+    
+    const url = request.nextUrl.clone();
+    url.pathname = `/${redirectLocale}`;
+    const response = NextResponse.redirect(url);
+    
+    // デバッグログを追加
+    return i18nLogger(request, response);
+  }
+  
+  // 保存された言語と現在のURLの言語が異なる場合、リダイレクトしない
+  // これにより、ユーザーが意図的に言語を変更した場合を尊重する
+  
+  let response = intlMiddleware(request);
+  
+  // responseがnullの場合の処理
+  if (!response) {
+    response = NextResponse.next();
+  }
+  
+  // レスポンスにロケールクッキーを設定
+  if (locales.includes(currentLocale as any)) {
+    response.cookies.set('NEXT_LOCALE', currentLocale, {
+      maxAge: 365 * 24 * 60 * 60, // 1年間
+      path: '/',
+      sameSite: 'lax'
+    });
+  }
+  
+  // デバッグログを追加
+  return i18nLogger(request, response);
+}
+
+export const config = {
+  // next-intlのミドルウェアを適用するパス
+  // 管理画面(/admin)とAPI(/api)は除外する
+  matcher: [
+    // Enable a redirect to a matching locale at the root
+    '/',
+
+    // Set a cookie to remember the previous locale for
+    // all requests that have a locale prefix  
+    '/(ja|en)/:path*',
+
+    // Enable redirects that add missing locales, but exclude API routes and admin routes
+    '/((?!_next|_vercel|api|admin|.*\\..*).*)'
+  ]
+};
\ No newline at end of file
diff --git a/frontend/next.config.js b/frontend/next.config.js
index 686f64cd..2ba5dd1d 100644
--- a/frontend/next.config.js
+++ b/frontend/next.config.js
@@ -1,4 +1,7 @@
-const withNextIntl = require('next-intl/plugin')('./i18n.ts');
+// 強化版i18n設定を使用（本番環境でMISSING_MESSAGEエラーを解決）
+const useEnhancedI18n = process.env.USE_ENHANCED_I18N === 'true' || process.env.NODE_ENV === 'production';
+const i18nConfig = useEnhancedI18n ? './i18n-enhanced.ts' : './i18n.ts';
+const withNextIntl = require('next-intl/plugin')(i18nConfig);
 
 /** @type {import('next').NextConfig} */
 const nextConfig = {
diff --git a/frontend/next.config.js.backup b/frontend/next.config.js.backup
new file mode 100644
index 00000000..c60deb60
--- /dev/null
+++ b/frontend/next.config.js.backup
@@ -0,0 +1,108 @@
+// 元のnext.config.jsのバックアップ
+const withNextIntl = require('next-intl/plugin')('./i18n.ts');
+
+/** @type {import('next').NextConfig} */
+const nextConfig = {
+  images: {
+    // Next.js Image最適化を無効化（unoptimizedを使用）
+    unoptimized: true,
+    domains: [
+      'localhost',
+      'charactier-ai.com',
+      // 本番環境の画像ドメイン
+      ...(process.env.NEXT_PUBLIC_IMAGE_DOMAIN ? [process.env.NEXT_PUBLIC_IMAGE_DOMAIN] : []),
+    ].filter(Boolean),
+    // アップロードされた画像のパスパターンを許可
+    remotePatterns: [
+      {
+        protocol: 'https',
+        hostname: 'charactier-ai.com',
+        pathname: '/uploads/**',
+      },
+      {
+        protocol: 'http',
+        hostname: 'localhost',
+        pathname: '/uploads/**',
+      },
+    ],
+  },
+  async rewrites() {
+    // 本番環境対応: 環境変数からバックエンドURLを取得
+    const isProduction = process.env.NODE_ENV === 'production';
+    const backendUrl = process.env.NEXT_PUBLIC_API_URL ||
+                      (isProduction ? 'https://charactier-ai.com' : 'http://localhost:5000');
+
+    console.log('🔗 Backend URL:', backendUrl);
+
+    return [
+      // フロントエンドAPIルートを優先（Next.js API routes）
+      {
+        source: '/api/user/profile',
+        destination: '/api/user/profile', // Next.js API route を使用
+      },
+      {
+        source: '/api/user/dashboard',
+        destination: '/api/user/dashboard', // Next.js API route を使用
+      },
+      // その他のAPIはバックエンドにプロキシ
+      {
+        source: '/api/:path*',
+        destination: `${backendUrl}/api/:path*`,
+      },
+      {
+        source: '/uploads/:path*',
+        destination: `${backendUrl}/uploads/:path*`,
+      },
+    ];
+  },
+  async headers() {
+    return [
+      {
+        // Apply security headers to all routes
+        source: '/:path*',
+        headers: [
+          {
+            key: 'X-DNS-Prefetch-Control',
+            value: 'on'
+          },
+          {
+            key: 'Strict-Transport-Security',
+            value: 'max-age=63072000; includeSubDomains; preload'
+          },
+          {
+            key: 'X-Frame-Options',
+            value: 'DENY'
+          },
+          {
+            key: 'X-Content-Type-Options',
+            value: 'nosniff'
+          },
+          {
+            key: 'X-XSS-Protection',
+            value: '1; mode=block'
+          },
+          {
+            key: 'Referrer-Policy',
+            value: 'strict-origin-when-cross-origin'
+          },
+          {
+            key: 'Permissions-Policy',
+            value: 'accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(self), usb=()'
+          },
+          {
+            key: 'X-Permitted-Cross-Domain-Policies',
+            value: 'none'
+          },
+          {
+            key: 'Content-Security-Policy',
+            value: process.env.NODE_ENV === 'production'
+              ? "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://js.stripe.com https://checkout.stripe.com https://www.googletagmanager.com https://www.google-analytics.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' data: https://fonts.gstatic.com; img-src 'self' data: blob: https: https://www.google-analytics.com; connect-src 'self' https://api.stripe.com https://checkout.stripe.com https://api.openai.com https://www.google-analytics.com https://www.googletagmanager.com wss: " + (process.env.NEXT_PUBLIC_API_URL || 'https://charactier-ai.com') + "; frame-src 'self' https://js.stripe.com https://checkout.stripe.com; object-src 'none'; media-src 'self'; child-src 'self'; form-action 'self'; upgrade-insecure-requests; block-all-mixed-content"
+              : "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://js.stripe.com https://checkout.stripe.com https://www.googletagmanager.com https://www.google-analytics.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' data: https://fonts.gstatic.com; img-src 'self' data: blob: https: http://localhost:* https://www.google-analytics.com; connect-src 'self' https://api.stripe.com https://checkout.stripe.com https://api.openai.com https://www.google-analytics.com https://www.googletagmanager.com wss: ws: http://localhost:*; frame-src 'self' https://js.stripe.com https://checkout.stripe.com; object-src 'none'; media-src 'self'; child-src 'self'; form-action 'self'"
+          }
+        ]
+      }
+    ];
+  },
+};
+
+module.exports = withNextIntl(nextConfig);
\ No newline at end of file
diff --git a/frontend/package.json b/frontend/package.json
index 29c3daad..c3686554 100644
--- a/frontend/package.json
+++ b/frontend/package.json
@@ -4,12 +4,14 @@
   "private": true,
   "scripts": {
     "dev": "next dev",
-    "build": "next build",
+    "build": "npm run validate:translations && next build",
+    "build:no-validate": "next build",
     "start": "next start",
     "lint": "next lint",
     "prepare": "husky",
     "test:e2e": "playwright test",
-    "test:e2e:security": "playwright test --grep @security"
+    "test:e2e:security": "playwright test --grep @security",
+    "validate:translations": "node scripts/validate-translations.js"
   },
   "dependencies": {
     "@types/js-cookie": "^3.0.6",
diff --git a/frontend/scripts/validate-translations.js b/frontend/scripts/validate-translations.js
new file mode 100755
index 00000000..5912a795
--- /dev/null
+++ b/frontend/scripts/validate-translations.js
@@ -0,0 +1,110 @@
+#!/usr/bin/env node
+const fs = require('fs');
+const path = require('path');
+const glob = require('glob');
+
+/**
+ * 翻訳ファイルの検証スクリプト
+ * ビルド前に実行して、必要なキーが存在することを確認
+ */
+
+// メッセージをフラット化
+function flattenMessages(messages, prefix = '') {
+  const flattened = {};
+  
+  Object.keys(messages).forEach((key) => {
+    const value = messages[key];
+    const newKey = prefix ? `${prefix}.${key}` : key;
+    
+    if (typeof value === 'string') {
+      flattened[newKey] = value;
+    } else if (typeof value === 'object' && value !== null) {
+      Object.assign(flattened, flattenMessages(value, newKey));
+    }
+  });
+  
+  return flattened;
+}
+
+// コンポーネントから使用されている翻訳キーを抽出
+function extractUsedKeys(filePath) {
+  const content = fs.readFileSync(filePath, 'utf8');
+  const keys = new Set();
+  
+  // useTranslations('namespace') パターン
+  const namespaceMatches = content.matchAll(/useTranslations\(['"]([^'"]+)['"]\)/g);
+  for (const match of namespaceMatches) {
+    const namespace = match[1];
+    
+    // t('key') パターン
+    const keyMatches = content.matchAll(/\bt\(['"]([^'"]+)['"]/g);
+    for (const keyMatch of keyMatches) {
+      keys.add(`${namespace}.${keyMatch[1]}`);
+    }
+  }
+  
+  return Array.from(keys);
+}
+
+// メイン処理
+async function main() {
+  console.log('🔍 Validating translation files...\n');
+  
+  // 翻訳ファイルを読み込み
+  const jaMessages = JSON.parse(fs.readFileSync(path.join(__dirname, '../messages/ja.json'), 'utf8'));
+  const enMessages = JSON.parse(fs.readFileSync(path.join(__dirname, '../messages/en.json'), 'utf8'));
+  
+  const jaFlat = flattenMessages(jaMessages);
+  const enFlat = flattenMessages(enMessages);
+  
+  console.log(`📚 Japanese keys: ${Object.keys(jaFlat).length}`);
+  console.log(`📚 English keys: ${Object.keys(enFlat).length}\n`);
+  
+  // コンポーネントファイルを検索
+  const componentFiles = glob.sync('app/**/*.{ts,tsx}', { 
+    cwd: path.join(__dirname, '..'),
+    ignore: ['**/node_modules/**']
+  });
+  
+  const usedKeys = new Set();
+  componentFiles.forEach(file => {
+    const keys = extractUsedKeys(path.join(__dirname, '..', file));
+    keys.forEach(key => usedKeys.add(key));
+  });
+  
+  console.log(`🔑 Used translation keys: ${usedKeys.size}\n`);
+  
+  // 不足しているキーをチェック
+  const missingInJa = [];
+  const missingInEn = [];
+  
+  usedKeys.forEach(key => {
+    if (!jaFlat[key]) missingInJa.push(key);
+    if (!enFlat[key]) missingInEn.push(key);
+  });
+  
+  // 結果を表示
+  if (missingInJa.length > 0) {
+    console.error('❌ Missing keys in ja.json:');
+    missingInJa.forEach(key => console.error(`   - ${key}`));
+    console.error('');
+  }
+  
+  if (missingInEn.length > 0) {
+    console.error('❌ Missing keys in en.json:');
+    missingInEn.forEach(key => console.error(`   - ${key}`));
+    console.error('');
+  }
+  
+  if (missingInJa.length === 0 && missingInEn.length === 0) {
+    console.log('✅ All translation keys are present!');
+    process.exit(0);
+  } else {
+    process.exit(1);
+  }
+}
+
+main().catch(error => {
+  console.error('Error:', error);
+  process.exit(1);
+});
\ No newline at end of file
diff --git a/frontend/src/hooks/useTranslations.ts b/frontend/src/hooks/useTranslations.ts
new file mode 100644
index 00000000..594b8b10
--- /dev/null
+++ b/frontend/src/hooks/useTranslations.ts
@@ -0,0 +1,31 @@
+import { useTranslations as useNextIntlTranslations } from 'next-intl';
+import { trackTranslationKey } from '@/middleware/logger';
+
+/**
+ * 型安全な翻訳フック（デバッグ機能付き）
+ */
+export function useTranslations(namespace?: string) {
+  const t = useNextIntlTranslations(namespace);
+  const isDevelopment = process.env.NODE_ENV === 'development';
+
+  // デバッグモードでは翻訳キーの使用を追跡
+  if (isDevelopment) {
+    return new Proxy(t, {
+      apply(target, thisArg, args) {
+        const key = args[0] as string;
+        const fullKey = namespace ? `${namespace}.${key}` : key;
+        
+        try {
+          const result = Reflect.apply(target, thisArg, args);
+          trackTranslationKey(fullKey, true, 'ja'); // TODO: 実際のlocaleを取得
+          return result;
+        } catch (error) {
+          trackTranslationKey(fullKey, false, 'ja'); // TODO: 実際のlocaleを取得
+          throw error;
+        }
+      }
+    });
+  }
+
+  return t;
+}
\ No newline at end of file
diff --git a/frontend/src/i18n/flattenMessages.ts b/frontend/src/i18n/flattenMessages.ts
new file mode 100644
index 00000000..72af71ab
--- /dev/null
+++ b/frontend/src/i18n/flattenMessages.ts
@@ -0,0 +1,53 @@
+/**
+ * ネストされたメッセージオブジェクトをフラットなキー形式に変換
+ * 例: { foo: { bar: "baz" } } -> { "foo.bar": "baz" }
+ */
+export function flattenMessages(
+  messages: Record<string, any>,
+  prefix = ''
+): Record<string, string> {
+  const flattened: Record<string, string> = {};
+
+  Object.keys(messages).forEach((key) => {
+    const value = messages[key];
+    const newKey = prefix ? `${prefix}.${key}` : key;
+
+    if (typeof value === 'string') {
+      flattened[newKey] = value;
+    } else if (typeof value === 'object' && value !== null) {
+      Object.assign(flattened, flattenMessages(value, newKey));
+    }
+  });
+
+  return flattened;
+}
+
+/**
+ * メッセージの存在を検証
+ */
+export function validateMessages(
+  messages: Record<string, any>,
+  requiredKeys: string[]
+): { valid: boolean; missing: string[] } {
+  const flattened = flattenMessages(messages);
+  const missing: string[] = [];
+
+  requiredKeys.forEach((key) => {
+    if (!(key in flattened)) {
+      missing.push(key);
+    }
+  });
+
+  return {
+    valid: missing.length === 0,
+    missing
+  };
+}
+
+/**
+ * デバッグ用: すべてのキーをログ出力
+ */
+export function logAllKeys(messages: Record<string, any>, locale: string): void {
+  const flattened = flattenMessages(messages);
+  console.log(`[i18n] Available keys for locale "${locale}":`, Object.keys(flattened).sort());
+}
\ No newline at end of file
diff --git a/frontend/src/middleware/logger.ts b/frontend/src/middleware/logger.ts
new file mode 100644
index 00000000..3d486e6a
--- /dev/null
+++ b/frontend/src/middleware/logger.ts
@@ -0,0 +1,52 @@
+import { NextRequest, NextResponse } from 'next/server';
+
+/**
+ * i18nデバッグロガーミドルウェア
+ */
+export function i18nLogger(request: NextRequest, response: NextResponse) {
+  const isDevelopment = process.env.NODE_ENV === 'development';
+  const debugEnabled = process.env.NEXT_PUBLIC_I18N_DEBUG === 'true';
+
+  if (isDevelopment || debugEnabled) {
+    const pathname = request.nextUrl.pathname;
+    const locale = pathname.split('/')[1];
+    
+    console.log('[i18n Middleware]', {
+      pathname,
+      locale,
+      acceptLanguage: request.headers.get('accept-language'),
+      savedLocale: request.cookies.get('NEXT_LOCALE')?.value,
+      timestamp: new Date().toISOString()
+    });
+
+    // レスポンスヘッダーにデバッグ情報を追加
+    response.headers.set('X-I18n-Locale', locale || 'unknown');
+    response.headers.set('X-I18n-Pathname', pathname);
+  }
+
+  return response;
+}
+
+/**
+ * 翻訳キーの使用状況をトラッキング
+ */
+const usedKeys = new Set<string>();
+const missingKeys = new Set<string>();
+
+export function trackTranslationKey(key: string, found: boolean, locale: string) {
+  if (found) {
+    usedKeys.add(`${locale}:${key}`);
+  } else {
+    missingKeys.add(`${locale}:${key}`);
+    console.warn(`[i18n] Missing translation key: ${key} (${locale})`);
+  }
+}
+
+export function getTranslationStats() {
+  return {
+    usedKeys: Array.from(usedKeys),
+    missingKeys: Array.from(missingKeys),
+    totalUsed: usedKeys.size,
+    totalMissing: missingKeys.size
+  };
+}
\ No newline at end of file
