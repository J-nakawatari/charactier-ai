'use client';

import { useEffect, useState, useCallback, useRef } from 'react';
import { authenticatedFetch } from '@/utils/auth';

// SSRÂØæÁ≠ñ: window„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÁí∞Â¢É„Åß„ÅÆÂÆüË°å„ÇíÈò≤„Åê
if (typeof window === 'undefined') {
  // „Çµ„Éº„Éê„Éº„Çµ„Ç§„Éâ„Åß„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑ„ÉÄ„Éü„ÉºÈñ¢Êï∞„ÇíËøî„Åô
  const dummyHook = () => ({
    unreadCount: 0,
    isConnected: false,
    connectionState: { status: 'disconnected' as const, retryCount: 0 },
    lastNotification: null,
    requestNotificationPermission: async () => false,
    reconnect: () => {}
  });
  
  // „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÂêç„ÇíÁ∂≠ÊåÅ
  module.exports = { useNotificationStreamOptimized: dummyHook };
}

interface NotificationEvent {
  type: 'unreadCount' | 'newNotification' | 'markAsRead';
  count?: number;
  notification?: {
    id: string;
    title: { ja: string; en: string };
    type: string;
  };
  notificationId?: string;
  unreadCount?: number;
}

interface ConnectionState {
  status: 'connecting' | 'connected' | 'disconnected' | 'failed';
  retryCount: number;
  lastError?: string;
}

export function useNotificationStreamOptimized() {
  const [unreadCount, setUnreadCount] = useState<number>(0);
  const [connectionState, setConnectionState] = useState<ConnectionState>({
    status: 'disconnected',
    retryCount: 0
  });
  const [lastNotification, setLastNotification] = useState<NotificationEvent['notification'] | null>(null);
  
  const eventSourceRef = useRef<EventSource | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const retryCountRef = useRef(0);

  // ÊúÄÂ§ß„É™„Éà„É©„Ç§ÂõûÊï∞„Å®„Éê„ÉÉ„ÇØ„Ç™„ÉïË®≠ÂÆö
  const MAX_RETRY_COUNT = 10;
  const INITIAL_RETRY_DELAY = 1000; // 1Áßí
  const MAX_RETRY_DELAY = 60000; // 60Áßí
  const BACKOFF_MULTIPLIER = 2;
  const JITTER_FACTOR = 0.3; // 30%„ÅÆ„Ç∏„ÉÉ„Çø„Éº

  // „Éê„ÉÉ„ÇØ„Ç™„ÉïÈÅÖÂª∂ÊôÇÈñì„ÅÆË®àÁÆó
  const calculateBackoffDelay = useCallback((retryCount: number): number => {
    // „Ç®„ÇØ„Çπ„Éù„Éç„É≥„Ç∑„É£„É´„Éê„ÉÉ„ÇØ„Ç™„Éï
    const exponentialDelay = Math.min(
      INITIAL_RETRY_DELAY * Math.pow(BACKOFF_MULTIPLIER, retryCount),
      MAX_RETRY_DELAY
    );
    
    // „Ç∏„ÉÉ„Çø„Éº„ÇíËøΩÂä†Ôºà„Çµ„Éº„Éê„Éº„Å∏„ÅÆÂêåÊôÇÊé•Á∂ö„ÇíÈò≤„ÅêÔºâ
    const jitter = exponentialDelay * JITTER_FACTOR * Math.random();
    
    return Math.floor(exponentialDelay + jitter);
  }, []);

  const connect = useCallback(async () => {
    // Êó¢Â≠ò„ÅÆÊé•Á∂ö„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    if (eventSourceRef.current) {
      eventSourceRef.current.close();
      eventSourceRef.current = null;
    }

    // ÊúÄÂ§ß„É™„Éà„É©„Ç§ÂõûÊï∞„ÇíË∂Ö„Åà„ÅüÂ†¥Âêà
    if (retryCountRef.current >= MAX_RETRY_COUNT) {
      setConnectionState({
        status: 'failed',
        retryCount: retryCountRef.current,
        lastError: 'Maximum retry attempts reached'
      });
      console.error('‚ùå Maximum retry attempts reached for notification stream');
      return;
    }

    setConnectionState(prev => ({
      ...prev,
      status: 'connecting'
    }));

    try {
      // EventSource„ÅØCookie„ÇíËá™ÂãïÁöÑ„Å´ÈÄÅ„Çã„ÅÆ„Åß„ÄÅË™çË®º„ÅØCookie„Éô„Éº„Çπ„ÅßË°å„Çè„Çå„Çã
      eventSourceRef.current = new EventSource(`/api/v1/notifications/stream`, {
        withCredentials: true
      });

      eventSourceRef.current.onopen = () => {
        console.log('‚úÖ Notification stream connected');
        retryCountRef.current = 0; // „É™„Éà„É©„Ç§„Ç´„Ç¶„É≥„Éà„Çí„É™„Çª„ÉÉ„Éà
        setConnectionState({
          status: 'connected',
          retryCount: 0
        });
      };

      eventSourceRef.current.onmessage = (event) => {
        try {
          // „Éè„Éº„Éà„Éì„Éº„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÁÑ°Ë¶ñ
          if (event.data === ':heartbeat') {
            return;
          }

          const data: NotificationEvent = JSON.parse(event.data);
          
          switch (data.type) {
            case 'unreadCount':
              setUnreadCount(data.count || 0);
              break;
            
            case 'newNotification':
              setUnreadCount(prev => prev + 1);
              setLastNotification(data.notification || null);
              
              // „Éñ„É©„Ç¶„Ç∂ÈÄöÁü•ÔºàÊ®©Èôê„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøÔºâ
              if ('Notification' in window && 
                  Notification.permission === 'granted' && 
                  document.hidden) { // „Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„Çø„Éñ„ÅÆÂ†¥Âêà„ÅÆ„Åø
                new Notification('Êñ∞„Åó„ÅÑ„ÅäÁü•„Çâ„Åõ', {
                  body: data.notification?.title.ja || 'Êñ∞„Åó„ÅÑ„ÅäÁü•„Çâ„Åõ„Åå„ÅÇ„Çä„Åæ„Åô',
                  icon: '/icon-192x192.png',
                  tag: 'charactier-notification', // Âêå„Åò„Çø„Ç∞„ÅßÈÄöÁü•„ÇíÁΩÆ„ÅçÊèõ„Åà„Çã
                  requireInteraction: false
                });
              }
              break;
            
            case 'markAsRead':
              setUnreadCount(data.unreadCount || 0);
              break;
          }
        } catch (error) {
          console.error('‚ùå Error parsing notification event:', error);
        }
      };

      eventSourceRef.current.onerror = (error) => {
        console.error('‚ùå Notification stream error:', error);
        eventSourceRef.current?.close();
        eventSourceRef.current = null;
        
        setConnectionState(prev => ({
          status: 'disconnected',
          retryCount: retryCountRef.current,
          lastError: 'Connection lost'
        }));

        // ÂÜçÊé•Á∂ö„ÅÆÊ∫ñÂÇô
        retryCountRef.current += 1;
        const delay = calculateBackoffDelay(retryCountRef.current);
        
        console.log(`üîÑ Reconnecting in ${delay}ms (attempt ${retryCountRef.current}/${MAX_RETRY_COUNT})`);
        
        reconnectTimeoutRef.current = setTimeout(() => {
          connect();
        }, delay);
      };

    } catch (error) {
      console.error('‚ùå Failed to connect notification stream:', error);
      setConnectionState({
        status: 'disconnected',
        retryCount: retryCountRef.current,
        lastError: error instanceof Error ? error.message : 'Unknown error'
      });
      
      // Êé•Á∂ö„Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÇÇÂÜçÊé•Á∂ö
      retryCountRef.current += 1;
      const delay = calculateBackoffDelay(retryCountRef.current);
      
      reconnectTimeoutRef.current = setTimeout(() => {
        connect();
      }, delay);
    }
  }, [calculateBackoffDelay]);

  // ÊâãÂãï„Åß„ÅÆÂÜçÊé•Á∂ö
  const reconnect = useCallback(() => {
    retryCountRef.current = 0; // „É™„Éà„É©„Ç§„Ç´„Ç¶„É≥„Éà„Çí„É™„Çª„ÉÉ„Éà
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
    }
    connect();
  }, [connect]);

  // „Éö„Éº„Ç∏Ë°®Á§∫/ÈùûË°®Á§∫„ÅÆÊ§úÂá∫
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (!document.hidden && connectionState.status === 'failed') {
        // „Éö„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„ÅüÊôÇ„ÄÅÂ§±ÊïóÁä∂ÊÖã„Å™„ÇâÂÜçÊé•Á∂ö„ÇíË©¶„Åø„Çã
        console.log('üì± Page became visible, attempting reconnection...');
        reconnect();
      }
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);
    
    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [connectionState.status, reconnect]);

  // „Ç™„É≥„É©„Ç§„É≥/„Ç™„Éï„É©„Ç§„É≥„ÅÆÊ§úÂá∫
  useEffect(() => {
    const handleOnline = () => {
      if (connectionState.status !== 'connected') {
        console.log('üåê Network came online, attempting reconnection...');
        reconnect();
      }
    };

    const handleOffline = () => {
      console.log('üìµ Network went offline');
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, [connectionState.status, reconnect]);

  // ÂàùÂõûÊé•Á∂ö
  useEffect(() => {
    // SSRÁí∞Â¢É„Åß„ÅØÂÆüË°å„Åó„Å™„ÅÑ
    if (typeof window === 'undefined') return;
    
    connect();

    // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÔºà„Éö„Éº„Ç∏Èõ¢ËÑ±ÊôÇ„Å´Á¢∫ÂÆü„Å´„É™„ÇΩ„Éº„Çπ„ÇíËß£ÊîæÔºâ
    return () => {
      // Êé•Á∂ö„ÇíÊòéÁ§∫ÁöÑ„Å´Èñâ„Åò„Çã
      if (eventSourceRef.current) {
        eventSourceRef.current.close();
        eventSourceRef.current = null;
      }
      
      // „Çø„Ç§„Éû„Éº„Çí„ÇØ„É™„Ç¢
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
        reconnectTimeoutRef.current = null;
      }
      
      // ÂÜçÊé•Á∂ö„Ç´„Ç¶„É≥„Éà„Çí„É™„Çª„ÉÉ„Éà
      retryCountRef.current = 0;
    };
  }, [connect]);

  // ÈÄöÁü•Ê®©Èôê„Çí„É™„ÇØ„Ç®„Çπ„Éà
  const requestNotificationPermission = useCallback(async () => {
    if ('Notification' in window && Notification.permission === 'default') {
      const permission = await Notification.requestPermission();
      return permission === 'granted';
    }
    return false;
  }, []);

  return {
    unreadCount,
    isConnected: connectionState.status === 'connected',
    connectionState,
    lastNotification,
    requestNotificationPermission,
    reconnect
  };
}